1) What is a Microservice?
    Microservices is an architectural style that structures an application as a collection of services that 
    are Independently deployable, loosely coupled and owned by a small Team. These services are 
    communicated to each other over well-designed APIs.

2) What is Monolith architecture?
    Everything in single codebase and deployed as a single unit. FE, BE , DB connection in one project. Hard to maintain

3) What is the difference between Monolith and Microservice?
    monolithic architectures offer simplicity and ease of development initially, microservices architectures provide greater 
    flexibility, scalability, and resilience, especially for larger and more complex applications

4) Why do we need a useEffect Hook?
    useEffect is a hook given by react which runs after a component renders and rerenders in DOM
    provided the hook must be placed inside that component.
    * useEffect hook expects two parameters. First parameter is a callback function and second one is a 
    dependency array.
    * The callback function will not be called immediately, but it gets called when useEffect wants it to 
    be called.
    * When a component renders or rerenders, useEffect calls its callback which is the default behaviour 
    of useEffect hook.
    * We can control this action by providing a dependency array. If dependency array is empty 
    useEffect calls its callback just once which is after component’s initial render but when the 
    component rerenders useEffect never calls its call back. 
    * Once we provide a state variable to the dependency array, useEffect calls its call back after 
    component’s initial render and subsequent renders in response to the state variable change.
    * We make API call inside the callback function of useEffect and provide an empty dependency array 
    to the hook so that API will be called just once.
    * The dependency array is optional. If we don’t provide the dependency array useEffect will not be 
    dependent on anything. So, every time component is rendered useEffect’s default behaviour kicks 
    in.

5) What is Optional Chaining?
    The optional chaining (?.) operator accesses an object's property or calls a function. 
    If the object accessed or function called using this operator is undefined or null, the expression short 
    circuits and evaluates to undefined instead of throwing an error.

6) What is Shimmer UI?
    Act as placeholder until data loads in the UI

7) What is the difference between JS expression and JS statement?
    JS expression -
    A JS expression returns a value that we use in the application. 
    example: 
    1 + 2 // expresses 3
    "foo".toUpperCase() // expresses 'FOO'
    console.log(2) // logs '2'
    isTrue ? true : false // returns us a true or false value based on isTrue value
    JS statement -
    A JS statement, does not return a value. 
    example:
    let x; // variable declaration
    if () { } // if condition
    If we want to use JS expression in JSX, we have to wrap in {/* expression slot */} and if we want to 
    use JS statement in JSX, we have to wrap in {(/* statement slot */)}

8) What is Conditional Rendering, explain with a code example
    based on the condition component will render .
    loggedIn ? <HomeCompoennt /> : <LoginComponent />

9) What is CORS?
    Cross-Origin Resource Sharing Resource.  is a security feature implemented by web browsers to restrict web pages 
    from making requests to servers in different origins or domains

10) What is async and await?
    Async and await are features in JavaScript that allow you to work with asynchronous code in a more synchronous and readable manner.
    An async function is a function that operates asynchronously via the event loop, using an implicit Promise to return its result.
    The await keyword is used inside an async function to pause execution and wait for the Promise to resolve.

    async function fetchData() {
        try {
            const response = await fetch('https://api.example.com/data');
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

11) What is the use of `const json = await data.json();` in getRestaurants()
    allows you to asynchronously fetch and parse JSON data from a web API